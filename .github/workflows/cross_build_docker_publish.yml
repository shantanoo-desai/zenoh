name: Build and Publish Docker Artefacts

on:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  test:
    name: Rust-Cross Build Zenoh
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            toolchain: stable
            use_cross: true
          # TODO add other Platforms
  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          override: true
      
      - name: Build Zenoh
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.use_cross }}
          args: --target ${{ matrix.target }} --release
      
      # Assuming `cross build --release --target ${TARGET} is successful
      # and the generated binaries are available in target/${TARGET}/release/ 
      - name: Setup up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Setup Docker Buildx
        id: Buildx-Zenoh
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and Push Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: linux/arm64
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      
      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

