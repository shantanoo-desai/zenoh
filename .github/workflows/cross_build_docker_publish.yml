name: Build and Publish Docker Artefacts

on:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  build-zenoh:
    name: Rust-Cross Build Zenoh
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-musl
            toolchain: stable
            use_cross: true
          # TODO add other Platforms
  
    steps:
      - name: Setup up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Setup Docker Buildx
        id: Buildx-Zenoh
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=shantanoodesai/zenoh
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          override: true
      
      - uses: Swatinem/rust-cache@v1
      
      - name: Build Zenoh
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.use_cross }}
          args: --target ${{ matrix.target }} --release
#       - run: cp target/${{ matrix.target }}/release/zenohd .
#       - run: cp target/${{ matrix.target }}/release/*.so .
#       - run: ls -la 
      - name: Build and Push Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          target: release
          platforms: linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      
      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

